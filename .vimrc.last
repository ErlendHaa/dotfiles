" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"Use tabs for go files
autocmd FileType go setlocal shiftwidth=4 tabstop=4 softtabstop=0 noexpandtab

" NERDTree
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <leader>gt :NERDTreeToggle<CR>
nnoremap <leader>gf :NERDTreeFind<CR>

let g:NERDTreeWinSize=50

" Exit Vim if NERDTree is the only window left.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |
    \ quit | endif

" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif

" Use relative line numbers
set relativenumber

" Fonts
set encoding=UTF-8

" Recognise .tsx as typescript
augroup SyntaxSettings
    autocmd!
    autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescriptreact
augroup END

" Recognised dotfiles as shell scrips
au BufNewFile,BufRead *.{sh,bash,zsh} set filetype=sh
au BufNewFile,BufRead .bashrc,.profile,.zshrc,.localrc,.osrc.darwin,.osrc.linux set filetype=sh
filetype plugin indent on

" highlight the close tag separately from the open tag
let g:vim_jsx_pretty_highlight_close_tag = 0

" Highlight yanked text
let g:highlightedyank_highlight_duration = 100  " in milliseconds

" Format Json buffer, requires jq
com! JSON %!jq .

"" lsp-vim settings
function! s:on_lsp_buffer_enabled() abort
    " Signs
    setlocal signcolumn=yes

    " Tag support
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif

    " Key mappings for LSP features
    nmap <buffer> gd :LspDefinition<CR>
    nmap <buffer> gs :LspDocumentSymbol<CR>
    nmap <buffer> gS :LspWorkspaceSymbol<CR>
    nmap <buffer> gr :LspReferences<CR>
    nmap <buffer> gi :LspImplementation<CR>
    nmap <buffer> gt :LspTypeDefinition<CR>
    nmap <buffer> <leader>rn :LspRename<CR>
    nmap <buffer> [g :LspPreviousDiagnostic<CR>
    nmap <buffer> ]g :LspNextDiagnostic<CR>
    nmap <buffer> E :LspDocumentDiagnostics<CR>
    nmap <buffer> K :LspHover<CR>
    nmap <buffer> ca :LspCodeAction<CR>

    let g:lsp_diagnostics_enabled = 1
    let g:lsp_code_action_signs_enabled = 1
    let g:lsp_diagnostics_echo_cursor = 1
    let g:lsp_diagnostics_virtual_text_enabled = 1
    let g:lsp_diagnostics_highlights_enabled = 1

    highlight link LspErrorText Comment
    highlight link LspWarningText Comment
    highlight link LspInformationText Comment
    highlight link LspHintText Comment
endfunction

augroup lsp_install
    autocmd!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

if executable('rust-analyzer')
  au User lsp_setup call lsp#register_server({
        \   'name': 'rust-analyzer',
        \   'cmd': {server_info->['rust-analyzer']},
        \   'whitelist': ['rust'],
        \   'initialization_options': {
        \     'cargo': {
        \       'buildScripts': {
        \         'enable': v:true,
        \       },
        \     },
        \     'procMacro': {
        \       'enable': v:true,
        \     },
        \   },
        \ })
endif

autocmd BufReadPost *.rs if !exists("g:rust_warmup_done") | let g:rust_warmup_done = 1 | call system('cargo check &') | endif

let g:lsp_settings = {
\  'clangd': {'cmd': ['clangd', '--enable-config', '-enable-snippets']},
\}

" Trim whitespace on save. Exclude filetypes by adding them to the index list.
" Eg. 'cpp'
augroup TrimWhitespace
  autocmd!
  autocmd BufWritePre * if index([ ],&filetype) < 0 | %s/\s\+$//e | endif
augroup END

nnoremap <leader>gf :GFiles<CR>
nnoremap <leader>sf :Files<CR>
nnoremap <leader>sg :Rg<CR>
